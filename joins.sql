USE sakila;
-- List the number of films per category.
-- 3 tables with 2 jointures: 
-- category and film_category > common column = category_id
-- film_category and film > common_column = film_id  
SELECT c.category_id, COUNT(f.film_id) AS number_films
FROM category as c
JOIN film_category as fc 
ON c.category_id = fc.category_id
JOIN film as f 
ON fc.film_id = f.film_id
GROUP BY c.category_id
ORDER BY number_films DESC;

-- Retrieve the store ID, city, and country for each store.
-- 4 tables with 3 jointures
-- store and address > common column = address_id
-- address and city > common_column = city_id
-- city and country > common column = country_id  
SELECT sto.store_id, ci.city, co.country
FROM store as sto
JOIN address
ON sto.address_id = address.address_id
JOIN city as ci
ON address.city_id = ci.city_id
JOIN country as co 
ON ci.country_id = co.country_id;


-- Calculate the total revenue generated by each store in dollars.
-- 4 tables with 3 jointures
-- store and customer > common column = store_id
-- customer and rental > common_column = customer_id
-- rental and payment > common column = rental_id 
SELECT sto.store_id, sum(amount) as total_revenue
FROM store as sto
JOIN customer as cus
ON sto.store_id = cus.store_id
JOIN rental as ren
ON cus.customer_id = ren.customer_id
JOIN payment as pay 
ON pay.rental_id = ren.rental_id
GROUP BY sto.store_id;

-- Determine the average running time of films for each category.
SELECT c.category_id, avg(f.length) AS average_running_time_films
FROM category as c
JOIN film_category as fc 
ON c.category_id = fc.category_id
JOIN film as f 
ON fc.film_id = f.film_id
GROUP BY c.category_id
ORDER BY average_running_time_films DESC 

-- Identify the film categories with the longest average running time.
-- Similar to the previous statement except we want only the first row DESC.
SELECT c.category_id, avg(f.length) AS average_running_time_films
FROM category as c
JOIN film_category as fc
ON c.category_id = fc.category_id
JOIN film as f
ON fc.film_id = f.film_id
GROUP BY c.category_id
ORDER BY average_running_time_films desc
LIMIT 1;



-- Display the top 10 most frequently rented movies in descending order.
SELECT count(rental.rental_id) AS rented_movies
FROM film
-- Joins -- 
GROUP BY film.title
ORDER BY rented_movies DESC
LIMIT 10;
-- Determine if "Academy Dinosaur" can be rented from Store 1.

-- Provide a list of all distinct film titles, along with their availability status in the inventory.
-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, 
-- and this information can be obtained using a CASE statement combined with IFNULL."